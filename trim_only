#!/bin/bash

# Trim a given video (or GIF) according to specified start and (optional) end timestamp.
# Output is in mp4 format.
# If neither timestamp specified, can be used to just convert input vid to mp4 format.
# works w/ WEBM, MP4, MOV, and GIF input formats (at least)
# Start and end time can either be integers or in "00:00.00" format

FILE_PATH="$(realpath "${1}")"
# https://code-maven.com/bash-absolute-path
FILEPATH_NO_EXT="${FILE_PATH%.*}"
EXT="${FILE_PATH##*.}"
FILENAME=$(basename "${FILE_PATH}") # includes extension

FILENAME_NO_EXT=$(basename "${FILE_PATH}" "."${EXT})
# https://unix.stackexchange.com/questions/313017/bash-function-splitting-name-and-extension-of-a-file
# https://linuxhandbook.com/basename/
FILE_DIR_OG=$(dirname "${FILE_PATH}")
# https://linuxhandbook.com/dirname/

NEW_EXT="${EXT,,}" # convert to lowercase for caller functions to correctly predict naming # https://stackoverflow.com/a/2264537
# put timestamps in output filename
if [[ $# == 2 ]];
then
  FILEPATH_OUT="${FILEPATH_NO_EXT}_${2}s-.${NEW_EXT}"
elif [[ $# == 3 ]];
then
  FILEPATH_OUT="${FILEPATH_NO_EXT}_${2}-${3}s.${NEW_EXT}"
else
  FILEPATH_OUT="${FILEPATH_NO_EXT}.${NEW_EXT}"
fi

# Validate input path
if [[ -e "${FILE_PATH}" ]];
then
  :
else
  printf "\nSpecified file cannot be found.\n"
  exit 1
fi

# Check for existence of output file before attempting conversion.
# ffmpeg has this check, but it requires the rest of the verbose output
# (which is suppressed below)
# Check for both resolvable path and broken symlink # https://unix.stackexchange.com/a/550837
if [[ $# -lt 2 ]]; # no timestamps specified.
then
  printf "\nExpected at least two arguments - filename, start time, and end time (optional)\n"
  exit 1
elif [[ -e "${FILEPATH_OUT}" ]] || [[ -h "${FILEPATH_OUT}" ]];
then
  printf "\nTarget file $(basename ${FILEPATH_OUT}) exists. Overwrite? [Y/N]\n"
  read -p ">" answer
  if [ "$answer" == "y" -o "$answer" == "Y" ];
  then
    rm "${FILEPATH_OUT}"
  else
    printf "Exiting\n"
    exit 1
  fi
fi

if [[ $# -gt 3 ]];
then
  printf "\nExpected up to three arguments - filename, start time, and end time (optional)\n"
  exit 1
fi

printf "\nAttempting to trim..."
if [[ $# == 2 ]]; # two args
then
  ffmpeg -ss ${2} -i "${FILE_PATH}" "${FILEPATH_OUT}" &> /dev/null
elif [[ $# == 3 ]]; # three args
then
  # have to convert from end time to duration ffmpeg expects
  START_TIME=$2
  END_TIME=$3
  # DURATION="$((END_TIME - START_TIME))"
  # https://unix.stackexchange.com/questions/232384/argument-string-to-integer-in-bash
  # check for negative number
  # if [ ${DURATION} -lt 1 ];
  # then
  #   printf "FAIL\nEnd time must be greater than start time\n"
  #   exit 1
  # else
  #   ffmpeg -ss ${2} -t ${DURATION} -i "${FILE_PATH}" "${FILEPATH_OUT}" &> /dev/null
  # fi
  ffmpeg -ss ${2} -i "${FILE_PATH}" -to ${END_TIME} "${FILEPATH_OUT}" &> /dev/null

fi

# Test if conversion was successful since ffmpeg output suppressed.
FFMPEG_RETURN=$? # gets return value of last command executed.
if [ ${FFMPEG_RETURN} == 0 ]
then
  printf "SUCCESS\n"
else
  printf "FAIL\n"
  exit 1
fi
